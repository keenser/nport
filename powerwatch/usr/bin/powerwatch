#!/usr/bin/env python
#
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
#

import logging
import logging.handlers
import time
import threading
import Adafruit_BBIO.GPIO as GPIO

version = "1.1-0"
servicename = "powerwatch"
servicedesc = "shutdown device on power failue"

def getoptions():
    import argparse
    parser = argparse.ArgumentParser(
        description="{0} {1}".format(servicedesc, version))

    parser.add_argument("-v", "--verbose",
        dest="verbosity",
        action="count",
        help="print more diagnostic messages (option can be given multiple times)",
        default=0
    )

    parser.add_argument("-l", "--log",
        dest="logfile",
        nargs="?",
        help="log file, default: %(default)s, %(const)s if enabled",
        const="/var/log/{0}".format(servicename)
    )

    parser.add_argument("-s", "--syslog",
        dest="syslog",
        action="store_true",
        help="log to syslog (default off)",
        default=False
    )

    parser.add_argument("-p", "--pid",
        dest="pid",
        nargs="?",
        help="pid file, default: %(default)s, %(const)s if enabled",
        const="/var/run/{0}.pid".format(servicename)
    )

    parser.add_argument("-f", "--foreground",
        dest="foreground",
        action="store_true",
        help="stay in foreground (default off)",
        default=False
    )

    parser.add_argument("--gpio",
        dest="gpio",
        help="gpio to monitor, default: %(default)s",
        default='P8_13'
    )

    parser.add_argument("--bouncetime",
        dest="bouncetime",
        type=float,
        help="gpio bouncetime in ms, default: %(default)s",
        default=100.0
    )

    parser.add_argument("--script",
        dest="script",
        help="specify custom script to call if system goes down, default: %(default)s",
        default="/etc/powerwatch"
    )

    return parser.parse_args()

import os
import sys
import atexit
import signal
class daemon:
    """A generic daemon class.

    Usage: subclass the daemon class and override the run() method."""

    def __init__(self, pidfile): self.pidfile = pidfile

    def daemonize(self, secondfork=False):
        """Deamonize class. UNIX double fork mechanism."""

        try:
            pid = os.fork()
            if pid > 0:
                # exit first parent
                sys.exit(0)
        except OSError as err:
            sys.stderr.write('fork #1 failed: {0}\n'.format(err))
            sys.exit(1)

        # decouple from parent environment
        os.chdir('/')
        os.setsid()
        os.umask(0)

        # do second fork
        if secondfork:
            try:
                pid = os.fork()
                if pid > 0:

                    # exit from second parent
                    sys.exit(0)
            except OSError as err:
                sys.stderr.write('fork #2 failed: {0}\n'.format(err))
                sys.exit(1)

        # write pidfile
        try:
            if self.pidfile:
                pid = str(os.getpid())
                with open(self.pidfile,'w+') as f:
                    f.write(pid + '\n')
                atexit.register(self.delpid)
        except PermissionError:
            sys.stderr.write('can not write pidfile %s\n' % self.pidfile)
            sys.exit(1)

        # redirect standard file descriptors
        sys.stdout.flush()
        sys.stderr.flush()
        si = open(os.devnull, 'r')
        so = open(os.devnull, 'a+')
        se = open(os.devnull, 'a+')

        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())

    def delpid(self):
        os.remove(self.pidfile)

    def start(self, foreground):
        """Start the daemon."""

        # Check for a pidfile to see if the daemon already runs
        try:
            with open(self.pidfile,'r') as pf:
                pid = int(pf.read().strip())
        except (IOError, TypeError, ValueError):
            pid = None

        if pid:
            message = "pidfile {0} already exist. " + \
                    "Daemon already running?\n"
            sys.stderr.write(message.format(self.pidfile))
            sys.exit(1)

        # catch TERM
        signal.signal(signal.SIGTERM, lambda signum, stack_frame: sys.exit(0))

        # Start the daemon
        if not foreground:
            self.daemonize()

import os
import shlex
import threading
import subprocess
class ShellProcessor(threading.Thread):
    def __init__(self):
        """Setup the object with a logger and a loglevel
        and start the thread
        """
        threading.Thread.__init__(self)
        self.daemon = False
        self.log = logging.getLogger('ShellProcessor')
        self.fdRead, self.fdWrite = os.pipe()
        self.pipeReader = os.fdopen(self.fdRead)
        self.start()

    def run(self):
        """Run the thread, logging everything.
        """
        for line in iter(self.pipeReader.readline, ''):
            self.log.debug(line.strip('\n'))
        self.pipeReader.close()

    def close(self):
        """Close the write end of the pipe.
        """
        os.close(self.fdWrite)

    def __call__(self, cmd):
        threading.Thread(target=self.worker, args=(cmd, )).start()

    def worker(self, cmd):
        self.log.info("exec '%s'", cmd)
        th = subprocess.Popen(shlex.split(cmd), stdout=self.fdWrite, stderr=self.fdWrite)
        th.wait()
        self.log.info("done %d", th.pid)

def main():
    options = getoptions()
    dm = daemon(options.pid)
    dm.start(options.foreground)

    if options.verbosity > 3:
        options.verbosity = 3

    level = (
        logging.WARNING,
        logging.INFO,
        logging.DEBUG,
        logging.NOTSET,
        )[options.verbosity]

    logger = logging.getLogger('')
    logger.addHandler(logging.NullHandler())
    logger.setLevel(level)
    logformat = '%(asctime)s %(levelname)s:%(name)s: %(message)s'

    if options.logfile:
        filelogger = logging.handlers.WatchedFileHandler(options.logfile)
        filelogger.setFormatter(logging.Formatter(logformat))
        logger.addHandler(filelogger)

    if options.syslog:
        syslogger = logging.handlers.SysLogHandler(address = '/dev/log', facility = logging.handlers.SysLogHandler.LOG_LOCAL4)
        syslogger.setFormatter(logging.Formatter('%(name)s: %(message)s'))
        logger.addHandler(syslogger)

    if options.foreground:
        conslogger = logging.StreamHandler()
        conslogger.setFormatter(logging.Formatter(logformat))
        logger.addHandler(conslogger)

    sys.excepthook = lambda excType, excValue, traceback: logging.getLogger('exception').error("Uncaught exception", exc_info=(excType, excValue, traceback))

    log = logging.getLogger(servicename)

    log.info("starting %s version %s", servicename, version)

    shell = ShellProcessor()

    values = {'prevvalue':0, 'debouncelock': threading.Lock()}
    def watchdog(gpio):
        if values['debouncelock'].acquire(False):
            try:
                time.sleep(options.bouncetime/1000.0)
                value = GPIO.input(gpio)
                if values['prevvalue'] != value:
                    values['prevvalue'] = value
                    param = ("ups", "ac")
                    shell("{0} {1}".format(options.script, param[value]))
            finally:
                values['debouncelock'].release()

    GPIO.setup(options.gpio, GPIO.IN)
    GPIO.add_event_detect(options.gpio, GPIO.BOTH, callback=watchdog)

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        log.info('stop')
    finally:
        shell.close()
        GPIO.remove_event_detect(options.gpio)
        GPIO.cleanup()
        log.info('exit')

if __name__ == '__main__':
    main()
